常用：
Ctrl + C 退出当前编辑状态

1、安装node.js 去下载安装 https://nodejs.org/en/ 

2、全局安装npm插件 npm install cnpm -g --registry=https://registry.npm.taobao.org 	//(因为npm服务器在国外，所以速度慢且可能会安装失败，所以用就淘宝cnpm镜像的方法)

3、在指定的盘符下新建一个项目目录 如：D: iDitor

4、初始化 npm init 	//(安装成功后，目录中会多一个package.json文件)

5、安装webpack  cnpm install webpack --save-dev 	//（安装成功后，目录中会多一个node_modules文件夹）

6、安装css-loader和style-loader npm install css-loader style-loader --save-dev 		//（主要用于 css文件相关打包操作）

7、新建一个用于关联[require('文件路径')] js文件 和 css文件[引入时：require('style-loader!css-loader!../css/iditor.css')] 的js主要文件

8、打包：webpack ./js/main.js js/iditor.js  	//webpack 主要js文件 打包后生成的js文件(此文件就可以在项目中引入使用了)




【在打包时】：
	webpack ./js/main.js ./js/iditor.js --module-bind 'css=style-loader!css-loader' （这样 在引入css文件时就不用在css路径前加 style-loader!css-loader! 了）


【每次修改代码，都要进一次打包，太烦琐了】：
	webpack ./js/main.js ./js/iditor.js --module-bind 'css=style-loader!css-loader' --watch (这样 就保存更新时，自动打包！)


【在打包时，可看到 打包过程】：
	webpack ./js/main.js ./js/iditor.js --module-bind 'css=style-loader!css-loader' --progress (打包时 可看到打包过程 % 完成百分比)


【在打包时，可看到 用不同颜色】：
	webpack ./js/main.js ./js/iditor.js --module-bind 'css=style-loader!css-loader' --progress --colors (打包时 可看到打包过程 % 用不同颜色区分)


【在打包时，可看到 引用了哪些模块】：
	webpack ./js/main.js ./js/iditor.js --module-bind 'css=style-loader!css-loader' --progress --colors --display-modules (打包时 可看到打包过程 % 可看到引用了哪些模块)


【在打包时，可看到 为什么要引用这些模块】：webpack ./js/main.js ./js/iditor.js --module-bind 'css=style-loader!css-loader' --progress --colors --display-modules --	display-reasons (打包时 可看到打包过程 % 引用了哪些模块 为什么要引用这些模块)


【在打包时，可看到以上4种情况 并自动打包】：
	webpack ./js/main.js ./js/iditor.js --module-bind 'css=style-loader!css-loader' --progress --colors --display-modules --display-reasons --watch (打包时 可看到打包过程 % 引用了哪些模块 为什么要引用这些模块)





webpack配置文件：webpack.config.js


const path = require('path');

module.exports = {
	//打包入口文件
	entry: [
	'./src/script/main.js', 
	'./src/script/a.js',
	'style-loader!css-loader!./src/style/main.css'
	], 
	//打包输入配置
	output: {
		path: path.resolve(__dirname, "./dist/js"), 	//打包后输出文件的目标目录
		filename: 'iHub-config.js' 	//打包后的文件名
	}
}

npm run webpack